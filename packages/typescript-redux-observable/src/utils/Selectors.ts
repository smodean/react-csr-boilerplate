////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NOTE imports
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import { createSelector, createSelectorCreator, defaultMemoize } from 'reselect';
import { get, isEqual } from 'lodash';
import { IRootState } from '../models';

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NOTE utils
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const checkState = (state: IRootState) => state;

export class Selector {
  public static deepEqualSelector = createSelectorCreator(defaultMemoize, isEqual);

  public static getRootBranch(branchName: keyof IRootState): any {
    return createSelector(
      checkState,
      (state: IRootState) => get<IRootState, keyof IRootState>(state, branchName),
    );
  }
}
